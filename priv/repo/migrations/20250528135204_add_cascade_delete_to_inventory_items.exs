defmodule Resdayn.Repo.Migrations.AddCascadeDeleteToInventoryItems do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    drop(constraint(:inventory_items, "inventory_items_object_ref_id_fkey"))

    drop(constraint(:inventory_items, "inventory_items_holder_ref_id_fkey"))

    alter table(:inventory_items) do
      modify(
        :holder_ref_id,
        references(:referencable_objects,
          column: :id,
          name: "inventory_items_holder_ref_id_fkey",
          type: :text,
          prefix: "public",
          on_delete: :delete_all
        )
      )

      modify(
        :object_ref_id,
        references(:referencable_objects,
          column: :id,
          name: "inventory_items_object_ref_id_fkey",
          type: :text,
          prefix: "public",
          on_delete: :delete_all
        )
      )
    end

    create index(:inventory_items, [:holder_ref_id])

    create index(:inventory_items, [:object_ref_id])
  end

  def down do
    drop_if_exists(index(:inventory_items, [:object_ref_id]))

    drop_if_exists(index(:inventory_items, [:holder_ref_id]))

    drop(constraint(:inventory_items, "inventory_items_holder_ref_id_fkey"))

    drop(constraint(:inventory_items, "inventory_items_object_ref_id_fkey"))

    alter table(:inventory_items) do
      modify(
        :object_ref_id,
        references(:referencable_objects,
          column: :id,
          name: "inventory_items_object_ref_id_fkey",
          type: :text,
          prefix: "public"
        )
      )

      modify(
        :holder_ref_id,
        references(:referencable_objects,
          column: :id,
          name: "inventory_items_holder_ref_id_fkey",
          type: :text,
          prefix: "public"
        )
      )
    end
  end
end
