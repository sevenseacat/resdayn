defmodule Resdayn.Repo.Migrations.AddReferencableObjectsToAllResources do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    alter table(:books) do
      modify(
        :id,
        references(:referencable_objects,
          column: :id,
          name: "books_id_fkey",
          type: :text,
          prefix: "public"
        )
      )
    end

    create index(:books, [:id])

    alter table(:static_objects) do
      modify(
        :id,
        references(:referencable_objects,
          column: :id,
          name: "static_objects_id_fkey",
          type: :text,
          prefix: "public"
        )
      )
    end

    create index(:static_objects, [:id])

    alter table(:miscellaneous_items) do
      modify(
        :id,
        references(:referencable_objects,
          column: :id,
          name: "miscellaneous_items_id_fkey",
          type: :text,
          prefix: "public"
        )
      )
    end

    create index(:miscellaneous_items, [:id])

    alter table(:clothing) do
      modify(
        :id,
        references(:referencable_objects,
          column: :id,
          name: "clothing_id_fkey",
          type: :text,
          prefix: "public"
        )
      )
    end

    create index(:clothing, [:id])

    alter table(:tools) do
      modify(
        :id,
        references(:referencable_objects,
          column: :id,
          name: "tools_id_fkey",
          type: :text,
          prefix: "public"
        )
      )
    end

    create index(:tools, [:id])

    alter table(:lights) do
      modify(
        :id,
        references(:referencable_objects,
          column: :id,
          name: "lights_id_fkey",
          type: :text,
          prefix: "public"
        )
      )
    end

    create index(:lights, [:id])

    alter table(:armor) do
      modify(
        :id,
        references(:referencable_objects,
          column: :id,
          name: "armor_id_fkey",
          type: :text,
          prefix: "public"
        )
      )
    end

    create index(:armor, [:id])

    alter table(:npcs) do
      modify(
        :id,
        references(:referencable_objects,
          column: :id,
          name: "npcs_id_fkey",
          type: :text,
          prefix: "public"
        )
      )
    end

    create index(:npcs, [:id])

    alter table(:item_levelled_lists) do
      modify(
        :id,
        references(:referencable_objects,
          column: :id,
          name: "item_levelled_lists_id_fkey",
          type: :text,
          prefix: "public"
        )
      )
    end

    create index(:item_levelled_lists, [:id])

    alter table(:alchemy_apparatus) do
      modify(
        :id,
        references(:referencable_objects,
          column: :id,
          name: "alchemy_apparatus_id_fkey",
          type: :text,
          prefix: "public"
        )
      )
    end

    create index(:alchemy_apparatus, [:id])

    alter table(:sounds) do
      modify(
        :id,
        references(:referencable_objects,
          column: :id,
          name: "sounds_id_fkey",
          type: :text,
          prefix: "public"
        )
      )
    end

    create index(:sounds, [:id])

    alter table(:ingredients) do
      modify(
        :id,
        references(:referencable_objects,
          column: :id,
          name: "ingredients_id_fkey",
          type: :text,
          prefix: "public"
        )
      )
    end

    create index(:ingredients, [:id])

    alter table(:potions) do
      modify(
        :id,
        references(:referencable_objects,
          column: :id,
          name: "potions_id_fkey",
          type: :text,
          prefix: "public"
        )
      )
    end

    create index(:potions, [:id])
  end

  def down do
    drop_if_exists(index(:potions, [:id]))

    drop(constraint(:potions, "potions_id_fkey"))

    alter table(:potions) do
      modify(:id, :text)
    end

    drop_if_exists(index(:ingredients, [:id]))

    drop(constraint(:ingredients, "ingredients_id_fkey"))

    alter table(:ingredients) do
      modify(:id, :text)
    end

    drop_if_exists(index(:sounds, [:id]))

    drop(constraint(:sounds, "sounds_id_fkey"))

    alter table(:sounds) do
      modify(:id, :text)
    end

    drop_if_exists(index(:alchemy_apparatus, [:id]))

    drop(constraint(:alchemy_apparatus, "alchemy_apparatus_id_fkey"))

    alter table(:alchemy_apparatus) do
      modify(:id, :text)
    end

    drop_if_exists(index(:item_levelled_lists, [:id]))

    drop(constraint(:item_levelled_lists, "item_levelled_lists_id_fkey"))

    alter table(:item_levelled_lists) do
      modify(:id, :text)
    end

    drop_if_exists(index(:npcs, [:id]))

    drop(constraint(:npcs, "npcs_id_fkey"))

    alter table(:npcs) do
      modify(:id, :text)
    end

    drop_if_exists(index(:armor, [:id]))

    drop(constraint(:armor, "armor_id_fkey"))

    alter table(:armor) do
      modify(:id, :text)
    end

    drop_if_exists(index(:lights, [:id]))

    drop(constraint(:lights, "lights_id_fkey"))

    alter table(:lights) do
      modify(:id, :text)
    end

    drop_if_exists(index(:tools, [:id]))

    drop(constraint(:tools, "tools_id_fkey"))

    alter table(:tools) do
      modify(:id, :text)
    end

    drop_if_exists(index(:clothing, [:id]))

    drop(constraint(:clothing, "clothing_id_fkey"))

    alter table(:clothing) do
      modify(:id, :text)
    end

    drop_if_exists(index(:miscellaneous_items, [:id]))

    drop(constraint(:miscellaneous_items, "miscellaneous_items_id_fkey"))

    alter table(:miscellaneous_items) do
      modify(:id, :text)
    end

    drop_if_exists(index(:static_objects, [:id]))

    drop(constraint(:static_objects, "static_objects_id_fkey"))

    alter table(:static_objects) do
      modify(:id, :text)
    end

    drop_if_exists(index(:books, [:id]))

    drop(constraint(:books, "books_id_fkey"))

    alter table(:books) do
      modify(:id, :text)
    end
  end
end
