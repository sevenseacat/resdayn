defmodule Resdayn.Repo.Migrations.AddCellsAndReferences do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:cell_references, primary_key: false) do
      add(:id, :bigint, null: false, primary_key: true)
      add(:count, :bigint)
      add(:scale, :float, default: 1.0)
      add(:coordinates, :map, null: false)
      add(:transport_to, :map)
      add(:usage_remaining, :map)
      add(:lock_difficulty, :bigint)
      add(:required_faction_rank, :bigint)
      add(:enchantment_charge, :float)
      add(:blocked, :boolean, default: false)
      add(:flags, {:array, :text}, null: false, default: [])
      add(:cell_id, :text, null: false, primary_key: true)
      add(:reference_id, :text, null: false)
      add(:owner_id, :text)
      add(:owner_faction_id, :text)
      add(:key_id, :text)
      add(:trap_id, :text)
      add(:soul_id, :text)
      add(:global_variable_id, :text)
    end

    create table(:cells, primary_key: false) do
      add(:id, :text, null: false, primary_key: true)
    end

    alter table(:cell_references) do
      modify(
        :cell_id,
        references(:cells,
          column: :id,
          name: "cell_references_cell_id_fkey",
          type: :text,
          prefix: "public",
          on_delete: :delete_all
        )
      )

      modify(
        :reference_id,
        references(:referencable_objects,
          column: :id,
          name: "cell_references_reference_id_fkey",
          type: :text,
          prefix: "public"
        )
      )

      modify(
        :owner_id,
        references(:npcs,
          column: :id,
          name: "cell_references_owner_id_fkey",
          type: :text,
          prefix: "public"
        )
      )

      modify(
        :owner_faction_id,
        references(:factions,
          column: :id,
          name: "cell_references_owner_faction_id_fkey",
          type: :text,
          prefix: "public"
        )
      )

      modify(
        :key_id,
        references(:referencable_objects,
          column: :id,
          name: "cell_references_key_id_fkey",
          type: :text,
          prefix: "public"
        )
      )

      modify(
        :trap_id,
        references(:spells,
          column: :id,
          name: "cell_references_trap_id_fkey",
          type: :text,
          prefix: "public"
        )
      )

      modify(
        :soul_id,
        references(:creatures,
          column: :id,
          name: "cell_references_soul_id_fkey",
          type: :text,
          prefix: "public"
        )
      )

      modify(
        :global_variable_id,
        references(:global_variables,
          column: :id,
          name: "cell_references_global_variable_id_fkey",
          type: :text,
          prefix: "public"
        )
      )
    end

    create index(:cell_references, [:cell_id])

    alter table(:cells) do
      add(:name, :text)
      add(:grid_position, {:array, :bigint})
      add(:water_height, :float)
      add(:light, :map)
      add(:map_color, :text)
      add(:cell_flags, {:array, :text}, default: [])
      add(:flags, {:array, :text}, null: false, default: [])

      add(
        :region_id,
        references(:regions,
          column: :id,
          name: "cells_region_id_fkey",
          type: :text,
          prefix: "public"
        )
      )
    end
  end

  def down do
    drop(constraint(:cells, "cells_region_id_fkey"))

    alter table(:cells) do
      remove(:region_id)
      remove(:flags)
      remove(:cell_flags)
      remove(:map_color)
      remove(:light)
      remove(:water_height)
      remove(:grid_position)
      remove(:name)
    end

    drop_if_exists(index(:cell_references, [:cell_id]))

    drop(constraint(:cell_references, "cell_references_cell_id_fkey"))

    drop(constraint(:cell_references, "cell_references_reference_id_fkey"))

    drop(constraint(:cell_references, "cell_references_owner_id_fkey"))

    drop(constraint(:cell_references, "cell_references_owner_faction_id_fkey"))

    drop(constraint(:cell_references, "cell_references_key_id_fkey"))

    drop(constraint(:cell_references, "cell_references_trap_id_fkey"))

    drop(constraint(:cell_references, "cell_references_soul_id_fkey"))

    drop(constraint(:cell_references, "cell_references_global_variable_id_fkey"))

    alter table(:cell_references) do
      modify(:global_variable_id, :text)
      modify(:soul_id, :text)
      modify(:trap_id, :text)
      modify(:key_id, :text)
      modify(:owner_faction_id, :text)
      modify(:owner_id, :text)
      modify(:reference_id, :text)
      modify(:cell_id, :text)
    end

    drop(table(:cells))

    drop(table(:cell_references))
  end
end
