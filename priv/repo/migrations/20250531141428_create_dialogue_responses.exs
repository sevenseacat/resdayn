defmodule Resdayn.Repo.Migrations.CreateDialogueResponses do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:dialogue_responses, primary_key: false) do
      add(:id, :text, null: false, primary_key: true)
      add(:previous_response_id, :text)
      add(:next_response_id, :text)
      add(:cell_name, :text)
      add(:content, :text)
      add(:script_content, :text)
      add(:disposition, :bigint)
      add(:speaker_faction_rank, :bigint)
      add(:player_faction_rank, :bigint)
      add(:gender, :text)
      add(:sound_filename, :text)
      add(:conditions, {:array, :map})

      add(
        :topic_id,
        references(:dialogue_topics,
          column: :id,
          name: "dialogue_responses_topic_id_fkey",
          type: :text,
          prefix: "public"
        ),
        primary_key: true,
        null: false
      )

      add(
        :speaker_npc_id,
        references(:npcs,
          column: :id,
          name: "dialogue_responses_speaker_npc_id_fkey",
          type: :text,
          prefix: "public"
        )
      )

      add(
        :speaker_creature_id,
        references(:creatures,
          column: :id,
          name: "dialogue_responses_speaker_creature_id_fkey",
          type: :text,
          prefix: "public"
        )
      )

      add(
        :speaker_class_id,
        references(:classes,
          column: :id,
          name: "dialogue_responses_speaker_class_id_fkey",
          type: :text,
          prefix: "public"
        )
      )

      add(
        :speaker_race_id,
        references(:races,
          column: :id,
          name: "dialogue_responses_speaker_race_id_fkey",
          type: :text,
          prefix: "public"
        )
      )

      add(
        :speaker_faction_id,
        references(:factions,
          column: :id,
          name: "dialogue_responses_speaker_faction_id_fkey",
          type: :text,
          prefix: "public"
        )
      )

      add(
        :player_faction_id,
        references(:factions,
          column: :id,
          name: "dialogue_responses_player_faction_id_fkey",
          type: :text,
          prefix: "public"
        )
      )
    end
  end

  def down do
    drop(constraint(:dialogue_responses, "dialogue_responses_topic_id_fkey"))

    drop(constraint(:dialogue_responses, "dialogue_responses_speaker_npc_id_fkey"))

    drop(constraint(:dialogue_responses, "dialogue_responses_speaker_creature_id_fkey"))

    drop(constraint(:dialogue_responses, "dialogue_responses_speaker_class_id_fkey"))

    drop(constraint(:dialogue_responses, "dialogue_responses_speaker_race_id_fkey"))

    drop(constraint(:dialogue_responses, "dialogue_responses_speaker_faction_id_fkey"))

    drop(constraint(:dialogue_responses, "dialogue_responses_player_faction_id_fkey"))

    drop(table(:dialogue_responses))
  end
end
